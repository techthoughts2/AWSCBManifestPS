---
AWSTemplateFormatVersion: "2010-09-09"

Description: "PS CodeBuild Stack: <%=$PLASTER_PARAM_ModuleName%>"

Parameters:
  CodeCommitRepositoryName:
    Type: String
    Default: <%=$PLASTER_PARAM_ModuleName%>
    Description: The CodeCommit Repository Name. You will likely want this named the same as the PowerShell solution being built.
    MaxLength: 100

  CodeCommitRepositoryDescription:
    Type: String
    Description: The CodeCommit Repository Description. Also used for the CodeBuild Project Description.
    MaxLength: 100

  CodeBuildBadgeEnabled:
    Type: String
    Default: "true"
    Description: Selects whether to enable CodeBuild Build Badges.
    AllowedValues:
      - "true"
      - "false"

  CodeBuildTimeoutInMinutes:
    Type: Number
    Default: 30
    Description: The number of minutes before a CodeBuild build will timeout.

  # https://docs.aws.amazon.com/codebuild/latest/userguide/create-project.html#create-project-cli
  CodeBuildEnvironment:
    Type: String
    Default: WINDOWS_CONTAINER
    Description: The type of build environment.
    AllowedValues:
      - WINDOWS_CONTAINER
      - LINUX_CONTAINER

  # https://docs.aws.amazon.com/codebuild/latest/userguide/create-project.html#create-project-cli
  CodeBuildComputeType:
    Type: String
    Default: BUILD_GENERAL1_MEDIUM
    Description: The size of the CodeBuild instance. (Windows Containers do NOT support small)
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE

  # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
  #CodeBuildImage:
  #  Type: String
  #  Default : aws/codebuild/windows-base:1.0
  #  Description: The size of the CodeBuild instance. (Windows Containers do NOT support small)
  #  AllowedValues:
  #    - aws/codebuild/windows-base:1.0
  #    - aws/codebuild/dot-net:core-2.1

  BuildSpecFile:
    Type: String
    Default: buildspec_powershell_windows.yml
    Description: The build file to be run by CodeBuild.
    AllowedValues:
      - buildspec_powershell_windows.yml
      - buildspec_pwsh_windows.yml
      - buildspec_pwsh_linux.yml

  DeployEmailNotifications:
    Type: String
    Default: "no"
    AllowedValues:
      - "yes"
      - "no"

  EmailForNotifications:
    Type: String
    Default: ignored@doesnotexist.com
    Description: Email Address for SNS Notifications
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Code Commit
        Parameters:
          - CodeCommitRepositoryName
          - CodeCommitRepositoryDescription
      - Label:
          default: CodeBuild
        Parameters:
          - CodeBuildBadgeEnabled
          - CodeBuildTimeoutInMinutes
          - CodeBuildEnvironment
          - CodeBuildComputeType
          - BuildSpecFile
      - Label:
          default: Email Notifications
        Parameters:
          - DeployEmailNotifications
          - EmailForNotifications
    ParameterLabels:
      CodeCommitRepositoryName:
        default: Repository Name
      CodeCommitRepositoryDescription:
        default: Repository Description
      CodeBuildBadgeEnabled:
        default: Badge Enabled
      CodeBuildTimeoutInMinutes:
        default: Timeout in Minutes
      CodeBuildEnvironment:
        default: Container Type
      CodeBuildComputeType:
        default: Container Size
      BuildSpecFile:
        default: Buildspec file
      DeployEmailNotifications:
        default: Deploy Email Notifications
      EmailForNotifications:
        default: Email Address

Conditions:
  DeployEmailNotificationsCondition:
    !Equals [!Ref DeployEmailNotifications, "yes"]
  WindowsImage: !Equals [!Ref CodeBuildEnvironment, "WINDOWS_CONTAINER"]

Resources:
  # CodeCommit Repository
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Ref CodeCommitRepositoryName
      RepositoryDescription: !Ref CodeCommitRepositoryDescription
      Triggers:
        - Name: CodeBuildTrigger
          CustomData: !Ref CodeCommitRepositoryName
          DestinationArn: !GetAtt CodeCommitTriggeredLambdaFunction.Arn
          Events:
            - createReference
            - updateReference

  # The IAM Role CodeBuild will run the container as
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CloudWatchPublishing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeCommitRepositoryName}"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeCommitRepositoryName}:*"
        - PolicyName: CodePipelineS3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*"
        - PolicyName: CodeCommitGitPull
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GitPull
                  - ecr:GetRepositoryPolicy
                  - ecr:SetRepositoryPolicy
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}"
        - PolicyName: SSMParameters
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CodeBuild/*"
        - PolicyName: S3ArtifactAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListObjects
                  - "s3:*"
                Resource:
                  - "*"

  # The CodeBuild Project configuration
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      BadgeEnabled: !Ref CodeBuildBadgeEnabled
      Description: !Ref CodeCommitRepositoryDescription
      Environment:
        ComputeType: !Ref CodeBuildComputeType
        Image:
          !If [
            WindowsImage,
            "aws/codebuild/windows-base:1.0",
            "aws/codebuild/dot-net:core-2.1",
          ]
        Type: !Ref CodeBuildEnvironment
        EnvironmentVariables:
          - Name: master_bucket
            Value: placeholder
            Type: PLAINTEXT
          - Name: s3_prefix
            Value: placeholder
            Type: PLAINTEXT
      Name: !Ref CodeCommitRepositoryName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepositoryName}"
        BuildSpec: !Ref BuildSpecFile
      Tags:
        - Key: Service
          Value: PowerShellBuildPipeline
      TimeoutInMinutes: !Ref CodeBuildTimeoutInMinutes

  # An SNS Topic used for CodeBuild status updates
  SNSTopicForCodeBuildUpdates:
    Type: AWS::SNS::Topic

  # The SNS Topic Policy
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: AllowEvents
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SNSTopicForCodeBuildUpdates
      Topics:
        - !Ref SNSTopicForCodeBuildUpdates

  # The SNS Email Subscription
  SNSEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: DeployEmailNotificationsCondition
    Properties:
      Endpoint: !Ref EmailForNotifications
      Protocol: email
      TopicArn: !Ref SNSTopicForCodeBuildUpdates

  # The CodeBuild event for status updates
  CodeBuildEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger notifications based on CodeBuild state changes
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - IN_PROGRESS
            - SUCCEEDED
            - FAILED
            - STOPPED
          project-name:
            - !Ref CodeBuildProject
      State: ENABLED
      Targets:
        - Arn: !Ref SNSTopicForCodeBuildUpdates
          Id: !Sub "${AWS::StackName}"
          InputTransformer:
            InputTemplate: '"The PowerShell solution build for <projectname> is in state <status> at <at>."'
            InputPathsMap:
              projectname: "$.detail.project-name"
              status: "$.detail.build-status"
              at: "$.time"
              account: "$.account"

  # IAM Role for invoking the CodeBuild project
  CodeCommitTriggeredLambdaFunctionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codecommit.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess

  # Embedded Lambda Function for simplified deployments
  CodeCommitTriggeredLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${CodeCommitRepositoryName}-Trigger"
      Description: Trigger CodeBuild from CodeCommit commit triggers.
      Handler: index.lambda_handler
      Runtime: python3.6
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          S3BucketMaster: !ImportValue PowerShellBucketMasterBuilds
          S3BucketDevelopment: !ImportValue PowerShellBucketDevelopmentBuilds
      Role: !GetAtt CodeCommitTriggeredLambdaFunctionIAMRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          client = boto3.client('codebuild')

          def lambda_handler(event, context):
            logger.info(json.dumps(event))

            branch = event['Records'][0]['codecommit']['references'][0]['ref'].replace('refs/heads/', '')
            master_bucket = os.environ['S3BucketMaster']

            if branch == 'mainline':
              s3_bucket = master_bucket
              s3_path = ''
            else:
              s3_bucket = os.environ['S3BucketDevelopment']
              s3_path = '{0}/{1}'.format(event['Records'][0]['customData'], branch)

            logger.info('Found GIT Branch: {0}'.format(branch))
            logger.info('Output artifact will be located in: s3:{0}/{1}'.format(s3_bucket, s3_path))

            build = {
              'projectName': event['Records'][0]['customData'],
              'sourceVersion': event['Records'][0]['codecommit']['references'][0]['commit'],
              'artifactsOverride': {
                'type': 'S3',
                'name': event['Records'][0]['customData'],
                'path': s3_path,
                'location': s3_bucket,
                'namespaceType': 'NONE',
                'packaging': 'NONE'
              },
              'environmentVariablesOverride': [
                {
                  'name': 'master_bucket',
                  'value': master_bucket,
                  'type': 'PLAINTEXT'
                },
                {
                  'name': 's3_prefix',
                  'value': event['Records'][0]['customData'],
                  'type': 'PLAINTEXT'
                },
                {
                  'name': 'branch',
                  'value': branch,
                  'type': 'PLAINTEXT'
                }
              ]
            }
            logger.info('Starting build for project {0} from commit ID {1}'.format(build['projectName'], build['sourceVersion']))
            logger.info(json.dumps(build))
            response = client.start_build(**build)
            logger.info('Successfully started a build with BuildId: {0}'.format(response['build']['id']))

  # Allows CodeCommit to invoke the Lambda Function for build triggers
  CodeCommitLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt CodeCommitTriggeredLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: codecommit.amazonaws.com

Outputs:
  CodeCommitRepository:
    Description: The name of the source CodeCommit Repository.
    Value: !Ref CodeCommitRepositoryName

  CodeBuildProject:
    Description: The name of the CodeBuild Project.
    Value: !Ref CodeBuildProject

  SNSTopic:
    Description: The SNS Topic used for CodeBuild status updates
    Value: !Ref SNSTopicForCodeBuildUpdates
